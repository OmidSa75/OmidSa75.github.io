<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://sadeghnezhad.me/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sadeghnezhad.me/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-11-19T17:41:09+00:00</updated><id>https://sadeghnezhad.me/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Shared Memory in python</title><link href="https://sadeghnezhad.me/blog/2024/shared-memory-python/" rel="alternate" type="text/html" title="Shared Memory in python"/><published>2024-09-05T04:30:00+00:00</published><updated>2024-09-05T04:30:00+00:00</updated><id>https://sadeghnezhad.me/blog/2024/shared-memory-python</id><content type="html" xml:base="https://sadeghnezhad.me/blog/2024/shared-memory-python/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>Consider you want to write a Python program and take advantage of multiprocessing logic. For example, some of your functions need to be run in different processes for parallelizing or some task handlers which are waiting to receive data on specific situations. However, there is a need to have a shared state in the memory so you can share data between your processes. So Iâ€™m going to introduce common multiprocessing shared memory in Python. Here I want to talk about the following shared states.</p> <ol> <li>Queue</li> <li>Pipe</li> <li>Manager</li> <li>SharedMemory</li> </ol> <h1 id="queue--pipe">Queue &amp; Pipe</h1> <h2 id="queue">Queue</h2> <p>Queue and Pipe are the simplest classes to be used in sharing data between processes. Creating a Queue will give you an object with which you can put and get data from it. Put data in a process and get that data in another process. The Queue is used to communicate between multiple processes.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/shared-memory-python/Queue-480.webp 480w,/assets/img/posts/shared-memory-python/Queue-800.webp 800w,/assets/img/posts/shared-memory-python/Queue-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/shared-memory-python/Queue.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>The Python Code:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">multiprocessing</span> <span class="k">as</span> <span class="n">mp</span>


<span class="k">def</span> <span class="nf">process_1</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">queue</span><span class="p">:</span><span class="n">mp</span><span class="p">.</span><span class="n">Queue</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">_data</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Process 1 is sending data: </span><span class="si">{</span><span class="n">_data</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">queue</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">_data</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">process_2</span><span class="p">(</span><span class="n">queue</span><span class="p">:</span> <span class="n">mp</span><span class="p">.</span><span class="n">Queue</span><span class="p">):</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">_data</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">block</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Process 2 got `</span><span class="si">{</span><span class="n">_data</span><span class="si">}</span><span class="s">` data</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
  <span class="n">shm_queue</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Queue</span><span class="p">()</span>
  <span class="n">data_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
  <span class="n">p1</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_1</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">shm_queue</span><span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">p2</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_2</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shm_queue</span><span class="p">,</span> <span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">p1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
  <span class="n">p2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
  <span class="n">p1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
  <span class="n">p2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
</code></pre></div></div> <h2 id="pipe">Pipe</h2> <p>The Pipe will give us two objects which refer to both the start and ending of a pipe, The first can send/receive data and, the second can receive/send data through it. The pipe is used for communication between two processes.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/shared-memory-python/Pipe-480.webp 480w,/assets/img/posts/shared-memory-python/Pipe-800.webp 800w,/assets/img/posts/shared-memory-python/Pipe-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/shared-memory-python/Pipe.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">multiprocessing</span> <span class="k">as</span> <span class="n">mp</span>


<span class="k">def</span> <span class="nf">process_1</span><span class="p">(</span><span class="n">data</span><span class="p">:</span> <span class="nb">list</span><span class="p">,</span> <span class="n">conn_1</span><span class="p">):</span>
  <span class="k">for</span> <span class="n">_data</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Process 1 is sending data: </span><span class="si">{</span><span class="n">_data</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">conn_1</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">_data</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">process_2</span><span class="p">(</span><span class="n">conn_2</span><span class="p">):</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">_data</span> <span class="o">=</span> <span class="n">conn_2</span><span class="p">.</span><span class="nf">recv</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Process 2 got `</span><span class="si">{</span><span class="n">_data</span><span class="si">}</span><span class="s">` data</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">_data</span> <span class="o">==</span> <span class="sh">"</span><span class="s">END</span><span class="sh">"</span><span class="p">:</span>
      <span class="k">break</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
  <span class="n">conn_1</span><span class="p">,</span> <span class="n">conn_2</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Pipe</span><span class="p">()</span>
  <span class="n">data_list</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span> <span class="o">+</span> <span class="p">[</span><span class="sh">"</span><span class="s">END</span><span class="sh">"</span><span class="p">]</span>
  <span class="n">p1</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_1</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">conn_1</span><span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">p2</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_2</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">conn_2</span><span class="p">,</span> <span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">p1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
  <span class="n">p2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
  <span class="n">p1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
  <span class="n">p2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>

</code></pre></div></div> <h2 id="comparison">Comparison</h2> <p>In Pythonâ€™s <code class="language-plaintext highlighter-rouge">multiprocessing</code> module, both <code class="language-plaintext highlighter-rouge">Queue</code> and <code class="language-plaintext highlighter-rouge">Pipe</code> are used for communication between processes, but they serve slightly different purposes and have different characteristics. Hereâ€™s a comparison:</p> <h3 id="1-queue">1. <strong>Queue</strong>:</h3> <ul> <li><strong>Purpose</strong>: <code class="language-plaintext highlighter-rouge">Queue</code> is designed for communication between multiple processes. It allows multiple producers (processes) to put data into the queue and multiple consumers (processes) to get data out of the queue.</li> <li><strong>Implementation</strong>: <code class="language-plaintext highlighter-rouge">Queue</code> is built on top of a <code class="language-plaintext highlighter-rouge">Pipe</code> with an additional layer of locks and semaphores to ensure thread-safe and process-safe operations.</li> <li><strong>Usage</strong>: <code class="language-plaintext highlighter-rouge">Queue</code> is often used when you have many processes that need to communicate with each other in a concurrent manner. Itâ€™s suitable for a producer-consumer pattern where one or more processes produce data, and one or more processes consume it.</li> <li><strong>Interface</strong>: <code class="language-plaintext highlighter-rouge">Queue</code> provides a high-level API similar to the <code class="language-plaintext highlighter-rouge">queue.Queue</code> used in threading. It has methods like <code class="language-plaintext highlighter-rouge">put()</code>, <code class="language-plaintext highlighter-rouge">get()</code>, <code class="language-plaintext highlighter-rouge">empty()</code>, <code class="language-plaintext highlighter-rouge">full()</code>, etc.</li> </ul> <h3 id="2-pipe">2. <strong>Pipe</strong>:</h3> <ul> <li><strong>Purpose</strong>: <code class="language-plaintext highlighter-rouge">Pipe</code> is used for communication between two processes. It establishes a direct connection between two endpoints (i.e., two processes).</li> <li><strong>Implementation</strong>: <code class="language-plaintext highlighter-rouge">Pipe</code> is simpler than <code class="language-plaintext highlighter-rouge">Queue</code>. It provides a pair of connected file descriptors or connection objects, with one process writing to one end and another process reading from the other.</li> <li><strong>Usage</strong>: <code class="language-plaintext highlighter-rouge">Pipe</code> is best used when you need a simple, low-level, and fast communication channel between exactly two processes. It can be used in both duplex (two-way) and simplex (one-way) modes.</li> <li><strong>Interface</strong>: <code class="language-plaintext highlighter-rouge">Pipe</code> provides two connection objects, <code class="language-plaintext highlighter-rouge">conn1</code> and <code class="language-plaintext highlighter-rouge">conn2</code>. You can send and receive data using <code class="language-plaintext highlighter-rouge">send()</code> and <code class="language-plaintext highlighter-rouge">recv()</code> methods on these objects.</li> </ul> <h3 id="summary">Summary:</h3> <ul> <li><strong>Queue</strong> is more flexible and suitable for scenarios where you need to manage communication among multiple processes in a thread-safe manner.</li> <li><strong>Pipe</strong> is more straightforward and is ideal for direct communication between two processes.</li> </ul> <h1 id="managers">Managers</h1> <p>Manager is a server process that manages shared objects, it can also manage sharing over a network. It has Python data types like list and dict which are shared.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">multiprocessing</span> <span class="k">as</span> <span class="n">mp</span>

<span class="k">def</span> <span class="nf">process_1</span><span class="p">(</span><span class="n">shared_list</span><span class="p">):</span>
    <span class="n">range_numbers</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">range_numbers</span><span class="p">:</span>
        <span class="n">shared_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">process_2</span><span class="p">(</span><span class="n">shared_list</span><span class="p">):</span>
    <span class="n">range_numbers</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">range_numbers</span><span class="p">:</span>
        <span class="n">shared_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Manager</span><span class="p">()</span>
    <span class="n">shared_list</span> <span class="o">=</span> <span class="n">manager</span><span class="p">.</span><span class="nf">list</span><span class="p">()</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_1</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_2</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">p1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="n">p2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">The final list is : </span><span class="si">{</span><span class="n">shared_list</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>An example with a lock object to control the access.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">multiprocessing</span> <span class="k">as</span> <span class="n">mp</span>

<span class="k">def</span> <span class="nf">process_1</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,</span> <span class="n">lock</span><span class="p">):</span>
    <span class="n">range_numbers</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">))</span>
    <span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">range_numbers</span><span class="p">:</span>
            <span class="n">shared_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">process_2</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,</span> <span class="n">lock</span><span class="p">):</span>
    <span class="n">range_numbers</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">))</span>
    <span class="k">with</span> <span class="n">lock</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">range_numbers</span><span class="p">:</span>
            <span class="n">shared_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">lock</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Manager</span><span class="p">()</span>
    <span class="n">shared_list</span> <span class="o">=</span> <span class="n">manager</span><span class="p">.</span><span class="nf">list</span><span class="p">()</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_1</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,</span> <span class="n">lock</span><span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_2</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shared_list</span><span class="p">,</span> <span class="n">lock</span><span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">p1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p2</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
    <span class="n">p1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="n">p2</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">The final list is : </span><span class="si">{</span><span class="n">shared_list</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h1 id="sharedmemory">SharedMemory</h1> <p>A SharedMemory object is a low level by creating it the interpreter gives you a part of a memory by its address with which you can read and write into it directly. The point is it gives you the higher performance compared to the previous methods but it needs more care in managing the read and write into it. You must specify the types, sizes, and shapes of your data. This is the implementation of SharedMemory with Numpy functionality.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">multiprocessing</span> <span class="k">as</span> <span class="n">mp</span>

<span class="kn">from</span> <span class="n">multiprocessing</span> <span class="kn">import</span> <span class="n">shared_memory</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>


<span class="k">def</span> <span class="nf">process_1</span><span class="p">(</span><span class="n">shm_name</span><span class="p">,</span> <span class="n">shape</span><span class="p">,</span> <span class="n">dtype</span><span class="p">):</span>
    <span class="n">shm</span> <span class="o">=</span> <span class="n">shared_memory</span><span class="p">.</span><span class="nc">SharedMemory</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">shm_name</span><span class="p">)</span>  <span class="c1"># Connect to the shared memory address
</span>    <span class="n">shared_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">ndarray</span><span class="p">(</span>  <span class="c1"># Get the value from the shm
</span>            <span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">,</span>
            <span class="n">dtype</span><span class="o">=</span><span class="n">dtype</span><span class="p">,</span>
            <span class="nb">buffer</span><span class="o">=</span><span class="n">shm</span><span class="p">.</span><span class="n">buf</span>
            <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">shared_array</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">full</span><span class="p">((</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="mi">255</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>  <span class="c1"># Create an array
</span>
    <span class="n">shm</span> <span class="o">=</span> <span class="n">shared_memory</span><span class="p">.</span><span class="nc">SharedMemory</span><span class="p">(</span><span class="n">create</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">array</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>  <span class="c1"># Create a shared memory with the size of the array
</span>
    <span class="n">shared_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">ndarray</span><span class="p">(</span>  <span class="c1"># Initial a ndarray object
</span>        <span class="n">array</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span>  <span class="c1"># Set the shape of the ndarray equals to the array
</span>        <span class="n">dtype</span><span class="o">=</span><span class="n">array</span><span class="p">.</span><span class="n">dtype</span><span class="p">,</span>  <span class="c1"># Set the type the same as the array type
</span>        <span class="nb">buffer</span><span class="o">=</span><span class="n">shm</span><span class="p">.</span><span class="n">buf</span><span class="p">,</span>  <span class="c1"># Connect the ndarray buffer to the shm buffer
</span>    <span class="p">)</span>
    <span class="n">np</span><span class="p">.</span><span class="nf">copyto</span><span class="p">(</span><span class="n">shared_array</span><span class="p">,</span> <span class="n">array</span><span class="p">)</span>  <span class="c1"># copy the array to the buffer
</span>    <span class="n">shm_name</span> <span class="o">=</span> <span class="n">shm</span><span class="p">.</span><span class="n">name</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">shm_name</span><span class="p">)</span>

    <span class="n">p1</span> <span class="o">=</span> <span class="n">mp</span><span class="p">.</span><span class="nc">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">process_1</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">shm_name</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">dtype</span><span class="p">),</span> <span class="n">daemon</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">p1</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>  <span class="c1"># Start the process
</span>    <span class="n">p1</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span>
    <span class="n">shm</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># Close the shm buffer
</span>    <span class="n">shm</span><span class="p">.</span><span class="nf">unlink</span><span class="p">()</span>  <span class="c1"># Disconnect all links to it
</span></code></pre></div></div> <h1 id="tutorial-video">Tutorial Video</h1> <p>I also prepared a YouTube video about this section.</p> <figure> <iframe src="https://www.youtube.com/embed/GVdupoMQ43c?si=IjAuNiE9OMVEQ_1x" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="720" height="480"/> </figure> <h1 id="conclusion">Conclusion</h1> <p>These are some methods of shared memory in python that you should select wisely by their usage. definitely, there are some other ways of sharing a memory in Python that I hope I can prepare other tutorials in the future.</p> <h1 id="references">References</h1> <ul> <li><a href="https://docs.python.org/3/library/multiprocessing.shared_memory.html#multiprocessing.shared_memory.SharedMemory">Shared Memory in Python</a></li> <li><a href="https://docs.python.org/3/library/multiprocessing.html#multiprocessing-managers">Multiprocessing Python</a></li> <li><a href="https://excalidraw.com/#json=1FaN_i6OgUFryUADDnXEQ,8AsBYEFd3v4SJnZg62cLOQ">Excalidraw drawing link</a></li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="programming"/><summary type="html"><![CDATA[Different types of shared memory in python which are provided by multiprocessing module.]]></summary></entry><entry><title type="html">Ways of processing</title><link href="https://sadeghnezhad.me/blog/2024/ways-of-processing/" rel="alternate" type="text/html" title="Ways of processing"/><published>2024-08-14T04:30:00+00:00</published><updated>2024-08-14T04:30:00+00:00</updated><id>https://sadeghnezhad.me/blog/2024/ways-of-processing</id><content type="html" xml:base="https://sadeghnezhad.me/blog/2024/ways-of-processing/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>In this blog we want to talk about the concepts of processing in the computer programming specially in python. So when we write a program and execute it, How Python Interpreter interfere with the code? What are the mechanisms to run?</p> <p>The following figure shows the default concepts of processing and some of their characteristics in the python.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/concepts-480.webp 480w,/assets/img/posts/ways-of-processing/concepts-800.webp 800w,/assets/img/posts/ways-of-processing/concepts-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/concepts.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>I will discuss about this concepts during this post.</p> <h1 id="default">Default</h1> <p>General Speaking, When you run the Python program, a process will run known as <code class="language-plaintext highlighter-rouge">main process</code> and also we have a thread in the <em>main process</em> which is known as <code class="language-plaintext highlighter-rouge">main thread</code>. All lines of codes are going to be executed in the <em>main process</em> by <em>main thread</em>. In detail, the <em>main-process</em> holds the <code class="language-plaintext highlighter-rouge">thread</code>s, but when we didnâ€™t create any thread, the program will start a <em>main-thread</em> automatically inside the <em>main process</em>, It means that a process can hold various threads.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/default-480.webp 480w,/assets/img/posts/ways-of-processing/default-800.webp 800w,/assets/img/posts/ways-of-processing/default-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/default.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Simple visualization about default program timeline. Each colorized rectangle shows a time duration of a processing function. </div> <h1 id="threading">Threading</h1> <p>One of the ways of processing is using <code class="language-plaintext highlighter-rouge">Thread</code>s in you program, so what does thread do? <em>Thread</em> creates a different timeline in your program that some functions could be executed in the separated timeline. Here, The important point is the object are used inside the thread are shared between the <em>main-thread</em> and the created <em>thread</em>, and also Python has a GIL (Global Interpreter Lock) which doesnâ€™t allow the program to run to functions simultaneously. In detail the GIL wonâ€™t allow the interpreter to access the same object in the memory. This behavior causes non-parallelization but you can still do concurrency. So your program will switch between your threads technically and because of this behavior, threads are good for IO bound tasks!</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/threading-480.webp 480w,/assets/img/posts/ways-of-processing/threading-800.webp 800w,/assets/img/posts/ways-of-processing/threading-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/threading.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> <em>Main-thread</em> and the <em>Thread-1</em> timelines and function calling while the <strong>GIL</strong> is switching between them. </div> <h2 id="object-reference-concept">Object Reference Concept</h2> <p>These are the stages on how an object is created in python, stored in memory and referenced during the program.</p> <ol> <li>The Object created and the value with a reference stored in the memory.</li> <li>The Thread is Opened and the object is used by thread so another reference will be created.</li> <li>The Thread Stopped and the thread object reference was deleted.</li> <li>The program is finished and all object references and values are deleted.</li> </ol> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/object_reference_concept-480.webp 480w,/assets/img/posts/ways-of-processing/object_reference_concept-800.webp 800w,/assets/img/posts/ways-of-processing/object_reference_concept-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/object_reference_concept.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <h1 id="multi-process">Multi-Process</h1> <p>Multi-Processing is designed for the situation you want to run and isolate (or not) part of your program to run independently. In order to use multi-processing you can run parts of your program with processes and there is no <strong>GIL</strong> to limit your timeline because each process has its own <strong>GIL</strong>. Processing doesnâ€™t have access to otherâ€™s memory, So you can not expect a single variable to be changed in the main process by child processes or vice versa.</p> <p>To acquire this purpose, a shared state should be defined. By using a shared state the processes can have access to it and use the same memory for reading and writing.</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/multi_processing-480.webp 480w,/assets/img/posts/ways-of-processing/multi_processing-800.webp 800w,/assets/img/posts/ways-of-processing/multi_processing-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/multi_processing.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> A process is started during the program with its own <strong>GIL</strong> and it can share variables to <em>main-process</em> through the shared state. </div> <h1 id="asyncio">AsyncIO</h1> <p>AsyncIO method is designed to execute IO tasks since it can wait on async function response but doesnâ€™t block the CPU. This feature can help execute various async functions simultaneously and collect their responses almost at the same time.</p> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>Python AsyncIO works only for network IO tasks <strong>not</strong> disk IO.</p> </blockquote> <blockquote class="block-warning"> <h5 id="warning">Warning</h5> <p>AsyncIO must used for IO tasks, it doesnâ€™t affect regular ones.</p> </blockquote> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/posts/ways-of-processing/asyncio-480.webp 480w,/assets/img/posts/ways-of-processing/asyncio-800.webp 800w,/assets/img/posts/ways-of-processing/asyncio-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/posts/ways-of-processing/asyncio.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <div class="caption"> Executing some IO functions with asyncio methodology will achieve concurrency. </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="programming"/><summary type="html"><![CDATA[The concepts of processing in Python]]></summary></entry></feed>